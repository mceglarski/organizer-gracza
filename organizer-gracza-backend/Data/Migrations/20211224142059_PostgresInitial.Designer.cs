// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using organizer_gracza_backend.Data;

namespace organizer_gracza_backend.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211224142059_PostgresInitial")]
    partial class PostgresInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Achievements", b =>
                {
                    b.Property<int>("AchievementsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("AchievementsId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Articles", b =>
                {
                    b.Property<int>("ArticlesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ArticlesId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventTeam", b =>
                {
                    b.Property<int>("EventTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventOrganiser")
                        .HasColumnType("text");

                    b.Property<int?>("EventTeamResultId")
                        .HasColumnType("integer");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("WinnerPrize")
                        .HasColumnType("double precision");

                    b.HasKey("EventTeamId");

                    b.HasIndex("EventTeamResultId")
                        .IsUnique();

                    b.HasIndex("GameId");

                    b.ToTable("EventTeam");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventTeamRegistration", b =>
                {
                    b.Property<int>("EventTeamRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("EventTeamRegistrationId");

                    b.HasIndex("EventTeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("EventTeamRegistration");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventTeamResult", b =>
                {
                    b.Property<int>("EventTeamResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EventTeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("EventTeamResultId");

                    b.HasIndex("TeamId");

                    b.ToTable("EventTeamResult");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventUser", b =>
                {
                    b.Property<int>("EventUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventOrganiser")
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.Property<int?>("EventUserResultId")
                        .HasColumnType("integer");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("WinnerPrize")
                        .HasColumnType("double precision");

                    b.HasKey("EventUserId");

                    b.HasIndex("EventUserResultId")
                        .IsUnique();

                    b.HasIndex("GameId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventUserRegistration", b =>
                {
                    b.Property<int>("EventUserRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventUserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("EventUserRegistrationId");

                    b.HasIndex("EventUserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUserRegistration");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventUserResult", b =>
                {
                    b.Property<int>("EventUserResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EventUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("EventUserResultId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUserResult");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.ForumPost", b =>
                {
                    b.Property<int>("ForumPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("ForumThreadId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ForumPostId");

                    b.HasIndex("ForumThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPost");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.ForumThread", b =>
                {
                    b.Property<int>("ForumThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ThreadDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ForumThreadId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumThread");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.GameStatistics", b =>
                {
                    b.Property<int>("GameStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("LostGames")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("WonGames")
                        .HasColumnType("integer");

                    b.HasKey("GameStatisticsId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameStatistics");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.GeneralStatistics", b =>
                {
                    b.Property<int>("GeneralStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EventsParticipated")
                        .HasColumnType("integer");

                    b.Property<int?>("EventsWon")
                        .HasColumnType("integer");

                    b.Property<int?>("PostWritten")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("GeneralStatisticsId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("GeneralStatistics");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("text");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("text");

                    b.HasKey("MessageId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicId")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ReminderId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.TeamUser", b =>
                {
                    b.Property<int>("TeamUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TeamUserId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SteamId")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.UserAchievement", b =>
                {
                    b.Property<int>("UserAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AchievementsId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserAchievementId");

                    b.HasIndex("AchievementsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.UserAchievementCounter", b =>
                {
                    b.Property<int>("UserAchievementCounterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("NumberOfEventUserJoined")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfPostsCreated")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfTeamsCreated")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfTeamsJoined")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfThreadsCreated")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserAchievementCounterId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAchievementCounters");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.UserGame", b =>
                {
                    b.Property<int>("UserGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGame");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Articles", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Connection", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventTeam", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.EventTeamResult", "EventTeamResult")
                        .WithOne("EventTeam")
                        .HasForeignKey("organizer_gracza_backend.Model.EventTeam", "EventTeamResultId");

                    b.HasOne("organizer_gracza_backend.Model.Game", "Game")
                        .WithMany("EventTeam")
                        .HasForeignKey("GameId");

                    b.Navigation("EventTeamResult");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventTeamRegistration", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.EventTeam", "EventTeam")
                        .WithMany("EventTeamRegistration")
                        .HasForeignKey("EventTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("organizer_gracza_backend.Model.Team", "Team")
                        .WithMany("EventTeamRegistration")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTeam");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventTeamResult", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventUser", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.EventUserResult", "EventUserResult")
                        .WithOne("EventUser")
                        .HasForeignKey("organizer_gracza_backend.Model.EventUser", "EventUserResultId");

                    b.HasOne("organizer_gracza_backend.Model.Game", "Game")
                        .WithMany("EventUser")
                        .HasForeignKey("GameId");

                    b.Navigation("EventUserResult");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventUserRegistration", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.EventUser", "EventUser")
                        .WithMany("EventUserRegistration")
                        .HasForeignKey("EventUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("EventUserRegistration")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventUserResult", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("EventUserResult")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.ForumPost", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.ForumThread", "ForumThread")
                        .WithMany("ForumPosts")
                        .HasForeignKey("ForumThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("ForumPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumThread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.ForumThread", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.Game", "Game")
                        .WithMany("ForumThread")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("ForumThreads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.GameStatistics", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.Game", "Game")
                        .WithMany("GameStatistics")
                        .HasForeignKey("GameId");

                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("GameStatistics")
                        .HasForeignKey("UserId");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.GeneralStatistics", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithOne("GeneralStatistics")
                        .HasForeignKey("organizer_gracza_backend.Model.GeneralStatistics", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Message", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("organizer_gracza_backend.Model.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Photo", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Reminder", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.TeamUser", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.Team", "Team")
                        .WithMany("TeamUser")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("TeamUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.UserAchievement", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.Achievements", "Achievements")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementsId");

                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId");

                    b.Navigation("Achievements");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.UserAchievementCounter", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithOne("UserAchievementCounter")
                        .HasForeignKey("organizer_gracza_backend.Model.UserAchievementCounter", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.UserGame", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.UserRole", b =>
                {
                    b.HasOne("organizer_gracza_backend.Model.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("organizer_gracza_backend.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Achievements", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventTeam", b =>
                {
                    b.Navigation("EventTeamRegistration");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventTeamResult", b =>
                {
                    b.Navigation("EventTeam");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventUser", b =>
                {
                    b.Navigation("EventUserRegistration");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.EventUserResult", b =>
                {
                    b.Navigation("EventUser");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.ForumThread", b =>
                {
                    b.Navigation("ForumPosts");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Game", b =>
                {
                    b.Navigation("EventTeam");

                    b.Navigation("EventUser");

                    b.Navigation("ForumThread");

                    b.Navigation("GameStatistics");

                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.Team", b =>
                {
                    b.Navigation("EventTeamRegistration");

                    b.Navigation("TeamUser");
                });

            modelBuilder.Entity("organizer_gracza_backend.Model.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("EventUserRegistration");

                    b.Navigation("EventUserResult");

                    b.Navigation("ForumPosts");

                    b.Navigation("ForumThreads");

                    b.Navigation("GameStatistics");

                    b.Navigation("GeneralStatistics");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Photos");

                    b.Navigation("Reminders");

                    b.Navigation("TeamUser");

                    b.Navigation("UserAchievementCounter");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserGames");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
